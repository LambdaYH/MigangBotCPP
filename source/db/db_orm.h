// generated by ./ddl2cpp MigangBot_DB.sql ./db white
#ifndef MIGANGBOT_DB_DB_ORM_H_
#define MIGANGBOT_DB_DB_ORM_H_

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace white {
namespace db {
namespace BlackListGroup_ {
struct GID {
  struct _alias_t {
    static constexpr const char _literal[] = "GID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T GID;
      T& operator()() { return GID; }
      const T& operator()() const { return GID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Reason {
  struct _alias_t {
    static constexpr const char _literal[] = "reason";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T reason;
      T& operator()() { return reason; }
      const T& operator()() const { return reason; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
}  // namespace BlackListGroup_

struct BlackListGroup : sqlpp::table_t<BlackListGroup, BlackListGroup_::GID,
                                       BlackListGroup_::Reason> {
  struct _alias_t {
    static constexpr const char _literal[] = "BlackListGroup";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T BlackListGroup;
      T& operator()() { return BlackListGroup; }
      const T& operator()() const { return BlackListGroup; }
    };
  };
};
namespace BlackListQQ_ {
struct UID {
  struct _alias_t {
    static constexpr const char _literal[] = "UID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T UID;
      T& operator()() { return UID; }
      const T& operator()() const { return UID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Reason {
  struct _alias_t {
    static constexpr const char _literal[] = "reason";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T reason;
      T& operator()() { return reason; }
      const T& operator()() const { return reason; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
}  // namespace BlackListQQ_

struct BlackListQQ
    : sqlpp::table_t<BlackListQQ, BlackListQQ_::UID, BlackListQQ_::Reason> {
  struct _alias_t {
    static constexpr const char _literal[] = "BlackListQQ";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T BlackListQQ;
      T& operator()() { return BlackListQQ; }
      const T& operator()() const { return BlackListQQ; }
    };
  };
};
namespace Feedbacks_ {
struct FeedbackID {
  struct _alias_t {
    static constexpr const char _literal[] = "feedbackID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T feedbackID;
      T& operator()() { return feedbackID; }
      const T& operator()() const { return feedbackID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert,
                         sqlpp::tag::must_not_update>;
};
struct Time {
  struct _alias_t {
    static constexpr const char _literal[] = "time";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T time;
      T& operator()() { return time; }
      const T& operator()() const { return time; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct UID {
  struct _alias_t {
    static constexpr const char _literal[] = "UID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T UID;
      T& operator()() { return UID; }
      const T& operator()() const { return UID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct GID {
  struct _alias_t {
    static constexpr const char _literal[] = "GID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T GID;
      T& operator()() { return GID; }
      const T& operator()() const { return GID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Content {
  struct _alias_t {
    static constexpr const char _literal[] = "content";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T content;
      T& operator()() { return content; }
      const T& operator()() const { return content; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
}  // namespace Feedbacks_

struct Feedbacks
    : sqlpp::table_t<Feedbacks, Feedbacks_::FeedbackID, Feedbacks_::Time,
                     Feedbacks_::UID, Feedbacks_::GID, Feedbacks_::Content> {
  struct _alias_t {
    static constexpr const char _literal[] = "Feedbacks";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T Feedbacks;
      T& operator()() { return Feedbacks; }
      const T& operator()() const { return Feedbacks; }
    };
  };
};
namespace Location_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T id;
      T& operator()() { return id; }
      const T& operator()() const { return id; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert,
                         sqlpp::tag::must_not_update>;
};
struct Location {
  struct _alias_t {
    static constexpr const char _literal[] = "location";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T location;
      T& operator()() { return location; }
      const T& operator()() const { return location; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct AlterName {
  struct _alias_t {
    static constexpr const char _literal[] = "alter_name";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T alterName;
      T& operator()() { return alterName; }
      const T& operator()() const { return alterName; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text>;
};
struct WeatherRate {
  struct _alias_t {
    static constexpr const char _literal[] = "weather_rate";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T weatherRate;
      T& operator()() { return weatherRate; }
      const T& operator()() const { return weatherRate; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
}  // namespace Location_

struct Location : sqlpp::table_t<Location, Location_::Id, Location_::Location,
                                 Location_::AlterName, Location_::WeatherRate> {
  struct _alias_t {
    static constexpr const char _literal[] = "Location";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T Location;
      T& operator()() { return Location; }
      const T& operator()() const { return Location; }
    };
  };
};
namespace Weather_ {
struct WeatherId {
  struct _alias_t {
    static constexpr const char _literal[] = "weather_id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T weatherId;
      T& operator()() { return weatherId; }
      const T& operator()() const { return weatherId; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert,
                         sqlpp::tag::must_not_update>;
};
struct Weather {
  struct _alias_t {
    static constexpr const char _literal[] = "weather";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T weather;
      T& operator()() { return weather; }
      const T& operator()() const { return weather; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
}  // namespace Weather_

struct Weather
    : sqlpp::table_t<Weather, Weather_::WeatherId, Weather_::Weather> {
  struct _alias_t {
    static constexpr const char _literal[] = "Weather";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T Weather;
      T& operator()() { return Weather; }
      const T& operator()() const { return Weather; }
    };
  };
};
namespace WeatherRate_ {
struct WeatherRate {
  struct _alias_t {
    static constexpr const char _literal[] = "weather_rate";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T weatherRate;
      T& operator()() { return weatherRate; }
      const T& operator()() const { return weatherRate; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct WR {
  struct _alias_t {
    static constexpr const char _literal[] = "w_r";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T wR;
      T& operator()() { return wR; }
      const T& operator()() const { return wR; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text>;
};
}  // namespace WeatherRate_

struct WeatherRate
    : sqlpp::table_t<WeatherRate, WeatherRate_::WeatherRate, WeatherRate_::WR> {
  struct _alias_t {
    static constexpr const char _literal[] = "WeatherRate";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T WeatherRate;
      T& operator()() { return WeatherRate; }
      const T& operator()() const { return WeatherRate; }
    };
  };
};
namespace Weibos_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T id;
      T& operator()() { return id; }
      const T& operator()() const { return id; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert,
                         sqlpp::tag::must_not_update>;
};
struct WeiboId {
  struct _alias_t {
    static constexpr const char _literal[] = "weibo_id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T weiboId;
      T& operator()() { return weiboId; }
      const T& operator()() const { return weiboId; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct PushTime {
  struct _alias_t {
    static constexpr const char _literal[] = "push_time";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T pushTime;
      T& operator()() { return pushTime; }
      const T& operator()() const { return pushTime; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Content {
  struct _alias_t {
    static constexpr const char _literal[] = "content";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T content;
      T& operator()() { return content; }
      const T& operator()() const { return content; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
}  // namespace Weibos_

struct Weibos : sqlpp::table_t<Weibos, Weibos_::Id, Weibos_::WeiboId,
                               Weibos_::PushTime, Weibos_::Content> {
  struct _alias_t {
    static constexpr const char _literal[] = "Weibos";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T Weibos;
      T& operator()() { return Weibos; }
      const T& operator()() const { return Weibos; }
    };
  };
};
namespace ZhanbuResults_ {
struct UID {
  struct _alias_t {
    static constexpr const char _literal[] = "UID";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T UID;
      T& operator()() { return UID; }
      const T& operator()() const { return UID; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
};
struct Luck {
  struct _alias_t {
    static constexpr const char _literal[] = "luck";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T luck;
      T& operator()() { return luck; }
      const T& operator()() const { return luck; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Yi {
  struct _alias_t {
    static constexpr const char _literal[] = "yi";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T yi;
      T& operator()() { return yi; }
      const T& operator()() const { return yi; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Ji {
  struct _alias_t {
    static constexpr const char _literal[] = "ji";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T ji;
      T& operator()() { return ji; }
      const T& operator()() const { return ji; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Dye {
  struct _alias_t {
    static constexpr const char _literal[] = "dye";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T dye;
      T& operator()() { return dye; }
      const T& operator()() const { return dye; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct AppendMsg {
  struct _alias_t {
    static constexpr const char _literal[] = "append_msg";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T appendMsg;
      T& operator()() { return appendMsg; }
      const T& operator()() const { return appendMsg; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Basemap {
  struct _alias_t {
    static constexpr const char _literal[] = "basemap";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T basemap;
      T& operator()() { return basemap; }
      const T& operator()() const { return basemap; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct ExpireTime {
  struct _alias_t {
    static constexpr const char _literal[] = "expire_time";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T expireTime;
      T& operator()() { return expireTime; }
      const T& operator()() const { return expireTime; }
    };
  };
  using _traits =
      sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
};
}  // namespace ZhanbuResults_

struct ZhanbuResults
    : sqlpp::table_t<ZhanbuResults, ZhanbuResults_::UID, ZhanbuResults_::Luck,
                     ZhanbuResults_::Yi, ZhanbuResults_::Ji,
                     ZhanbuResults_::Dye, ZhanbuResults_::AppendMsg,
                     ZhanbuResults_::Basemap, ZhanbuResults_::ExpireTime> {
  struct _alias_t {
    static constexpr const char _literal[] = "ZhanbuResults";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t {
      T ZhanbuResults;
      T& operator()() { return ZhanbuResults; }
      const T& operator()() const { return ZhanbuResults; }
    };
  };
};
}  // namespace db
}  // namespace white
#endif

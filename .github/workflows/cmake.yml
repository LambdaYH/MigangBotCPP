name: CMake

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 600

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install boost
      uses: MarkusJx/install-boost@v2.1.0
      id: install-boost
      with:
        # REQUIRED: Specify the required boost version
        # A list of supported versions can be found here: 
        # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
        boost_version: 1.78.0
        # OPTIONAL: Specify a platform version
        platform_version: 20.04
        # OPTIONAL: Specify a toolset
        toolset: gcc
        
        # NOTE: If a boost version matching all requirements cannot be found,
        # this build step will fail
    - name: Install Requirements
      run: sudo apt install default-libmysqlclient-dev libopencv-dev uuid-dev libssl-dev libcurl4-openssl-dev -y
      
    - name: tencentcloud-sdk-cpp
      run: | 
          git clone https://github.com/TencentCloud/tencentcloud-sdk-cpp.git
          cd tencentcloud-sdk-cpp
          mkdir build && cd build
          cmake -DBUILD_SHARED_LIBS=off -DBUILD_MODULES="nlp" ..
          make && sudo make install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
